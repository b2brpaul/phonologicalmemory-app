{"ast":null,"code":"var _jsxFileName = \"/Users/macbookbro/phonologicalmemory-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport Confetti from 'react-dom-confetti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [score, setScore] = useState(0);\n  const [countdown, setCountdown] = useState(null);\n  const [numDigits, setNumDigits] = useState(5);\n  const [digitSequence, setDigitSequence] = useState([]);\n  const [showSubmit, setShowSubmit] = useState(false);\n  const [userSequence, setUserSequence] = useState(\"\");\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [reversedSequence, setReversedSequence] = useState(''); // Nouvel état pour la séquence inversée\n  const confettiConfig = {\n    angle: 90,\n    spread: 360,\n    startVelocity: 20,\n    elementCount: 200,\n    dragFriction: 0.12,\n    duration: 3000,\n    stagger: 3,\n    width: \"10px\",\n    height: \"10px\",\n    perspective: \"500px\",\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n  };\n  function generateSequence() {\n    const sequence = Array.from({\n      length: numDigits\n    }, () => Math.floor(Math.random() * 10));\n    setDigitSequence(sequence);\n    setCountdown(10);\n  }\n  useEffect(() => {\n    if (digitSequence.length > 0) {\n      setReversedSequence([...digitSequence].reverse().join('')); // Définit l'état de la séquence inversée avant le timeout\n\n      setCountdown(10); // Initialise le compte à rebours à 10\n\n      const timer = setTimeout(() => {\n        setDigitSequence([]);\n        setShowSubmit(true);\n      }, 10000);\n\n      // Crée un intervalle qui décrémente le compte à rebours chaque seconde\n      const countdownTimer = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown - 1);\n      }, 1000);\n      return () => {\n        clearTimeout(timer);\n        clearInterval(countdownTimer); // Nettoie l'intervalle lorsque le composant est démonté ou la séquence change\n      };\n    }\n  }, [digitSequence]);\n  function checkSequence() {\n    const userSequenceWithoutSpaces = userSequence.replace(/\\s/g, '');\n    setUserSequence(\"\");\n    setShowSubmit(false);\n    if (userSequenceWithoutSpaces === reversedSequence) {\n      // Comparaison avec reversedSequence au lieu de digitSequence\n      setAlertMessage('Correct!');\n      setScore(prevScore => prevScore + 1); // Incrémente le score\n    } else {\n      setAlertMessage(`Incorrect, try again. Expected sequence was: ${reversedSequence}`);\n    }\n  }\n  function resetGame() {\n    setNumDigits(5);\n    setDigitSequence([]);\n    setShowSubmit(false);\n    setUserSequence(\"\");\n    setAlertMessage(\"\");\n    setReversedSequence(\"\"); // Réinitialise également reversedSequence\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Confetti, {\n      active: alertMessage === 'Correct!',\n      config: confettiConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"I want the sequence to be :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: numDigits,\n      onChange: e => setNumDigits(Number(e.target.value)),\n      children: Array.from({\n        length: 16\n      }, (_, i) => i + 5).map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: num,\n        children: num\n      }, num, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"numbers long\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Click \\\"Generate Sequence\\\" to start. A random sequence of numbers will be shown. Memorize this sequence, as it will disappear after 10 seconds. You will then have to enter the sequence in reverse.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateSequence,\n      children: \"Generate Sequence\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time left: \", countdown]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sequence-container\",\n      children: digitSequence.map((digit, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sequence-item\",\n        children: digit\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), showSubmit && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userSequence,\n        onChange: e => setUserSequence(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkSequence,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), alertMessage && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: alertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Try again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xLGcX8YPXbQW9zChrfCckmFHPgQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","Confetti","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","score","setScore","countdown","setCountdown","numDigits","setNumDigits","digitSequence","setDigitSequence","showSubmit","setShowSubmit","userSequence","setUserSequence","alertMessage","setAlertMessage","reversedSequence","setReversedSequence","confettiConfig","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","generateSequence","sequence","Array","from","length","Math","floor","random","reverse","join","timer","setTimeout","countdownTimer","setInterval","prevCountdown","clearTimeout","clearInterval","checkSequence","userSequenceWithoutSpaces","replace","prevScore","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","active","config","value","onChange","e","Number","target","_","i","map","num","onClick","digit","type","_c","$RefreshReg$"],"sources":["/Users/macbookbro/phonologicalmemory-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport Confetti from 'react-dom-confetti';\n\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [countdown, setCountdown] = useState(null);\n  const [numDigits, setNumDigits] = useState(5);\n  const [digitSequence, setDigitSequence] = useState([]);\n  const [showSubmit, setShowSubmit] = useState(false);\n  const [userSequence, setUserSequence] = useState(\"\");\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [reversedSequence, setReversedSequence] = useState(''); // Nouvel état pour la séquence inversée\n  const confettiConfig = {\n    angle: 90,\n    spread: 360,\n    startVelocity: 20,\n    elementCount: 200,\n    dragFriction: 0.12,\n    duration: 3000,\n    stagger: 3,\n    width: \"10px\",\n    height: \"10px\",\n    perspective: \"500px\",\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n  };\n\n\n  function generateSequence() {\n    const sequence = Array.from({ length: numDigits }, () => Math.floor(Math.random() * 10));\n    setDigitSequence(sequence);\n    setCountdown(10);\n  }\n\n  useEffect(() => {\n    if (digitSequence.length > 0) {\n      \n      setReversedSequence([...digitSequence].reverse().join('')); // Définit l'état de la séquence inversée avant le timeout\n\n      setCountdown(10); // Initialise le compte à rebours à 10\n\n      const timer = setTimeout(() => {\n        setDigitSequence([]);\n        setShowSubmit(true);\n      }, 10000);\n\n      // Crée un intervalle qui décrémente le compte à rebours chaque seconde\n      const countdownTimer = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown - 1);\n      }, 1000);\n\n      return () => {\n        clearTimeout(timer);\n        clearInterval(countdownTimer); // Nettoie l'intervalle lorsque le composant est démonté ou la séquence change\n      }\n    }\n  }, [digitSequence]);\n\n\nfunction checkSequence() {\n  const userSequenceWithoutSpaces = userSequence.replace(/\\s/g, '');\n  setUserSequence(\"\");\n  setShowSubmit(false);\n  if (userSequenceWithoutSpaces === reversedSequence) { // Comparaison avec reversedSequence au lieu de digitSequence\n    setAlertMessage('Correct!');\n    setScore(prevScore => prevScore + 1); // Incrémente le score\n  } else {\n    setAlertMessage(`Incorrect, try again. Expected sequence was: ${reversedSequence}`);\n  }\n}\n\n\n  function resetGame() {\n    setNumDigits(5);\n    setDigitSequence([]);\n    setShowSubmit(false);\n    setUserSequence(\"\");\n    setAlertMessage(\"\");\n    setReversedSequence(\"\"); // Réinitialise également reversedSequence\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <h2>Score: {score}</h2>\n\n      <Confetti active={alertMessage === 'Correct!'} config={confettiConfig} />\n      <p>I want the sequence to be :</p>\n\n      <select value={numDigits} onChange={e => setNumDigits(Number(e.target.value))}>\n        {Array.from({ length: 16 }, (_, i) => i + 5).map(num => (\n          <option key={num} value={num}>{num}</option>\n        ))}\n      </select>\n      <p>numbers long</p>\n\n      <p>Click \"Generate Sequence\" to start. A random sequence of numbers will be shown. Memorize this sequence, as it will disappear after 10 seconds. You will then have to enter the sequence in reverse.</p>\n      <button onClick={generateSequence}>Generate Sequence</button>\n      <p>Time left: {countdown}</p>\n      <div className=\"sequence-container\">\n\n  {digitSequence.map((digit, i) => (\n    <div key={i} className=\"sequence-item\">{digit}</div>\n\n  ))}\n</div>\n      {showSubmit && (\n        <>\n          <input type=\"text\" value={userSequence} onChange={e => setUserSequence(e.target.value)} />\n          <button onClick={checkSequence}>Submit</button>\n        </>\n      )}\n      {alertMessage && (\n        <>\n          <p>{alertMessage}</p>\n          <button onClick={resetGame}>Try again</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}